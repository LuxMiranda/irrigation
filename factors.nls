;;==============================================;;
;;==============< Misc. functions >=============;;
;;==============================================;;

;; Truncate an investment if it exceeds possible investment boundaries
;; @EMD @Factor @return-type=num @parameter-type=num
to-report truncate-invest [ investment ]
  if investment < 0 [ report 0 ]
  if investment > 10 [ report 10 ]
  report investment
end

;; Truncate an extraction if it exceeds possible investment boundaries
to-report truncate-extract [ extraction ]
  if extraction < 0 [ report 0 ]
  if extraction > pga [ report pga ]
  report extraction
end

;;==============================================;;
;;=============< Scalar operators >=============;;
;;==============================================;;

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num
to-report _add [a b]
  let ret 0 
  carefully [ set ret a + b ] [ ]
  report ret
end

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num
to-report _sub [a b]
  let ret 0 
  carefully [ set ret a - b ] [ ]
  report ret
end

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num
to-report _div [a b]
  let ret 0
  carefully [ set ret a / (0.0000000001 +  b ) ] [ ]
  report ret
end

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num
to-report _mlt [a b]
  let ret 0 
  carefully [ set ret a * b ] [ ]
  report ret
end

to-report _abs [ a ]
  report abs a
end

;; @EMD @Factor @return-type=num @parameter-type=num
to-report _sqr [ a ]
  let ret 0
  carefully [ set ret a * a ] [ ]
  report ret
end

;; @EMD @Factor @return-type=num @parameter-type=num
to-report _sqrt [ a ]
  let ret 0
  carefully [ set ret sqrt a ] [ ]
  report ret
end

;; @EMD @Factor @return-type=num @parameter-type=num
to-report _exp [ a ]
  let ret 0
  carefully [ set ret exp a ] [ ]
  report ret
end

to-report _nlog [ a ]
  report log E a
end

;; @EMD @Factor @return-type=num @parameter-type=num
to-report _sin [ a ]
  report sin a
end

to-report _cos [ a ]
  report cos a
end

to-report _tan [ a ]
  report tan a
end

;;==============================================;;
;;=============< Vector operators >=============;;
;;==============================================;;

;; Retrieve the index of the largest item in a list
to-report max-index [xs] 
  ;; Indices
  let maxIndex 0
  let i 0
  ;; Fetch the first element
  let maxElem (item 0 xs)
  ;; For each item in the list
  foreach xs [ [x] ->
    ;; If the current item is larger than the last seen maxElem, 
    ;; set a new maxElem & maxIndex
    if (x > maxElem) [
      set maxElem x
      set maxIndex i
    ]
    set i (i + 1)
  ]
  report maxIndex
end

;; Retrieve the index of the smallest item in a list
to-report min-index [xs]
  ;; Indices
  let minIndex 0
  let i 0
  ;; Fetch the first element
  let minElem (item 0 xs)
  ;; For each item in the list
  foreach xs [ [x] ->
    ;; If the current item is smaller than the last seen minElem,
    ;; set a new minElem & minIndex
    if (x < minElem) [
      set minElem x
      set minIndex i
    ]
    set i (i + 1)
  ]
  report minIndex
end

;; @EMD @Factor @return-type=num @parameter-type=num-list
to-report _sum [xs] 
  if xs = [] [ report 0 ]
  report sum xs
end

;; @EMD @Factor @return-type=num @parameter-type=num-list
to-report _mean [xs] 
  if xs = [] [ report 0 ]
  report mean xs
end

;; @EMD @Factor @return-type=num @parameter-type=num-list
to-report _max [xs] 
  if xs = [] [ report 0 ]
  report max xs
end

;; @EMD @Factor @return-type=num @parameter-type=num-list
to-report _min [xs] 
  if xs = [] [ report 0 ]
  report min xs
end

;; @EMD @Factor @return-type=num @parameter-type=num-list
to-report _first [xs] 
  if xs = [] [ report 0 ]
  report first xs
end

;; @EMD @Factor @return-type=num @parameter-type=num-list
to-report _last [xs] 
  if xs = [] [ report 0 ]
  report last xs
end

;; @EMD @Factor @return-type=num-list @parameter-type=num-list @parameter-type=num
to-report append [xs x]
  report lput x xs
end

;; @EMD @Factor @return-type=num-list @parameter-type=num-list @parameter-type=num
to-report prepend [xs x]
  report fput x xs
end


;;==============================================;;
;;=============< Iverson booleans >=============;;
;;==============================================;;

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num
to-report _less [a b]
  if a < b [ report 1 ]
  report 0
end

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num
to-report _greater [a b]
  if a > b [ report 1 ]
  report 0
end

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num
to-report _equal [a b]
  if a = b [ report 1 ]
  report 0
end

to-report _notequal [a b]
  if a != b [ report 1 ]
  report 0
end


;;==============================================;;
;;=============< Probabilizations >=============;;
;;==============================================;;

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num @parameter-type=num
to-report linear-dist [o s x]
  let ret 0
  if s = 0 [ report 0 ]
  carefully [ set ret -1 * (abs ((o - x) / s)) + 1 ] [ ]
  report ret
end

;; A standard normal probability density function
;; Mu - mean (expected)
;; Sd - standard deviation
;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num @parameter-type=num
to-report normal-dist [ mu sd x ]
  let ret 0
  if sd = 0 [ report 0 ]
  carefully [ 
    let coeff 1 / (sd * (sqrt (2 * pi)))
    let power -0.5 * (((x - mu) / sd) ^ 2)
    set ret coeff * (exp power)
  ] []
  report ret
end

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num
to-report exponential-dist [ lam x ] 
  let ret 0
  if x < 0 [ report 0 ] 
  carefully [ set ret lam * exp (-1 * lam * x) ] [ ]
  report ret
end

;; @EMD @Factor @return-type=num @parameter-type=num @parameter-type=num @parameter-type=num
to-report logistic-dist [ mu s x ]
  let ret 0
  if s = 0 [ report 0 ]
  carefully [ set ret 1 / ((1 + exp (-1 * (x - mu) / s)) + 0.0000000001) ] [ ]
  report ret
end
 
;;==============================================;;
;;================< Generators >================;;
;;==============================================;;

;; @EMD @Factor @return-type=num-list
to-report possible-decisions 
  report [0 1 2 3 4 5 6 7 8 9 10]
end

;; @EMD @Factor @return-type=num-list
to-report empty-list
  report []
end

;; @EMD @Factor @return-type=num
to-report _random-float
  report random-float 1
end

;; @EMD @Factor @return-type=num
to-report random-invest
  report random 11
end

;;==============================================;;
;;=============< Domain variables >=============;;
;;==============================================;;

;; @EMD @Factor @return-type=num
to-report upstream-neighbors-last-investment
  ;; If its the first tick, there are no prior neighbor investments to consider
  if ticks = 0 [ report 0 ]
  ;; Get my position
  let myPos [who] of self
  ;; If I am the most upstream turtle, there is no upstream homophily
  if myPos = 0 [ report 0 ]
  report last [listcontribute] of turtle (myPos - 1)
end

;; @EMD @Factor @return-type=num
to-report downstream-neighbors-last-investment
  ;; If its the first tick, there are no prior neighbor investments to consider
  if ticks = 0 [ report 0 ]
  ;; Get my position
  let myPos [who] of self
  ;; If I am the most downstream turtle, there is no downstream homophily
  if myPos = 4 [ report 0 ]
  report last [listcontribute] of turtle (myPos + 1)
end

;; @EMD @Factor @return-type=num
to-report _pga
  report pga
end

;; @EMD @Factor @return-type=num
to-report _pg
  report pg
end

;; @EMD @Factor @return-type=num
to-report _income
  report income
end

;; @EMD @Factor @return-type=num
to-report _incomeothers
  report incomeothers
end

;; @EMD @Factor @return-type=num
to-report _expincome
  report expincome
end

;; @EMD @Factor @return-type=num
to-report _expshare
  report expshare
end

;; @EMD @Factor @return-type=num
to-report _utility
  report utility
end

;; @EMD @Factor @return-type=num-list
to-report _utillist
  if utillist = 0 [ report [] ]
  report utillist
end

;; @EMD @Factor @return-type=num
to-report _utiltot
  report utiltot
end

;; @EMD @Factor @return-type=num-list
to-report _probinvest
  report probinvest
end

;; @EMD @Factor @return-type=num
to-report _exppg
  report exppg
end

;; @EMD @Factor @return-type=num-list
to-report _listcollect
  if listcollect = 0 [ report [] ]
  report listcollect
end

;; @EMD @Factor @return-type=num-list
to-report _listcontribute
  if listcontribute = 0 [ report [] ]
  report listcontribute
end

;; @EMD @Factor @return-type=num
to-report _roi
  report roi
end

;; @EMD @Factor @return-type=num
to-report _real-invest
  report real-invest
end
